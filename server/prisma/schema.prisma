// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//logic: if user is employer, role = employer
// otherwise, role = user
// role = employer => employerProfile
// role = user => userProfile 
model User {
  userId         String   @id @default(cuid())
  email          String   @unique
  active         Boolean  @default(false)
  hashedPassword String
  role           String
  isVerified     Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  UserProfile     UserProfile? // field optional because it can have either employer profile or user profile
  EmployerProfile EmployerProfile? // read above
}

model EmailVerification {
  id      String   @id @default(cuid())
  userId  String   @unique
  token   String
  expires DateTime
}

model UserProfile {
  userId String @id

  firstName      String
  lastName       String
  profilePicture String
  rating         Float?
  birthday       String
  location       String
  about          String

  User User @relation(fields: [userId], references: [userId])

  ListingApplications ListingApplications[]
  Ratings             Ratings[]
}

model EmployerProfile {
  userId     String @unique
  employerId String @id @default(cuid())

  name           String
  about          String
  rating         Float?
  location       String
  state          String
  city           String
  profilePicture String
  activityDomain String

  listings            Listing[]
  ratings             Ratings[]
  listingApplications ListingApplications[]
  User                User                  @relation(fields: [userId], references: [userId])
}

model Listing {
  listingId         String   @id @default(cuid())
  title             String
  description       String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
  jobDurationInDays Int
  hoursPerDay       Int
  photoURL          String
  employerId        String
  startDate         String
  endDate           String

  ListingApplications ListingApplications[]
  Employer            EmployerProfile       @relation(fields: [employerId], references: [employerId])
}

model Ratings {
  ratingId   String   @id @default(cuid())
  userId     String
  employerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  employerProfile EmployerProfile @relation(fields: [employerId], references: [employerId])
  userProfile     UserProfile     @relation(fields: [userId], references: [userId])

  @@unique([userId, employerId])
}

model ListingApplications {
  listingId      String
  listingOwnerId String          @default("") // this is not needed
  userId         String
  status         String
  createdAt      DateTime        @default(now())
  Listing        Listing         @relation(fields: [listingId], references: [listingId])
  UserProfile    UserProfile     @relation(fields: [userId], references: [userId])
  Employer       EmployerProfile @relation(fields: [listingOwnerId], references: [employerId])

  @@id([listingId, userId])
}
